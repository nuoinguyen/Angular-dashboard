{"ast":null,"code":"/**\n * @license Angular v13.0.2\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ɵstringify, NgModule, Directive, Component, Pipe, createPlatformFactory, COMPILER_OPTIONS, Injector, CompilerFactory } from '@angular/core';\nimport { TestComponentRenderer, ɵMetadataOverrider, ɵTestingCompilerFactory } from '@angular/core/testing';\nimport { ɵplatformCoreDynamic, ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS } from '@angular/platform-browser-dynamic';\nimport { BrowserTestingModule } from '@angular/platform-browser/testing';\nimport { ɵgetDOM, DOCUMENT } from '@angular/common';\nimport { CompileReflector, PipeResolver, DirectiveResolver, NgModuleResolver, ERROR_COMPONENT_TYPE } from '@angular/compiler';\nimport { MockPipeResolver, MockDirectiveResolver, MockNgModuleResolver } from '@angular/compiler/testing';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\n\nclass DOMTestComponentRenderer extends TestComponentRenderer {\n  constructor(_doc) {\n    super();\n    this._doc = _doc;\n  }\n\n  insertRootElement(rootElId) {\n    this.removeAllRootElements();\n    const rootElement = ɵgetDOM().getDefaultDocument().createElement('div');\n    rootElement.setAttribute('id', rootElId);\n\n    this._doc.body.appendChild(rootElement);\n  }\n\n  removeAllRootElements() {\n    // TODO(juliemr): can/should this be optional?\n    const oldRoots = this._doc.querySelectorAll('[id^=root]');\n\n    for (let i = 0; i < oldRoots.length; i++) {\n      ɵgetDOM().remove(oldRoots[i]);\n    }\n  }\n\n}\n\nDOMTestComponentRenderer.ɵfac = function DOMTestComponentRenderer_Factory(t) {\n  return new (t || DOMTestComponentRenderer)(i0.ɵɵinject(DOCUMENT));\n};\n\nDOMTestComponentRenderer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DOMTestComponentRenderer,\n  factory: DOMTestComponentRenderer.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DOMTestComponentRenderer, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst COMPILER_PROVIDERS = [{\n  provide: MockPipeResolver,\n  deps: [CompileReflector]\n}, {\n  provide: PipeResolver,\n  useExisting: MockPipeResolver\n}, {\n  provide: MockDirectiveResolver,\n  deps: [CompileReflector]\n}, {\n  provide: DirectiveResolver,\n  useExisting: MockDirectiveResolver\n}, {\n  provide: MockNgModuleResolver,\n  deps: [CompileReflector]\n}, {\n  provide: NgModuleResolver,\n  useExisting: MockNgModuleResolver\n}];\n\nclass TestingCompilerFactoryImpl {\n  constructor(_injector, _compilerFactory) {\n    this._injector = _injector;\n    this._compilerFactory = _compilerFactory;\n  }\n\n  createTestingCompiler(options) {\n    const compiler = this._compilerFactory.createCompiler(options);\n\n    return new TestingCompilerImpl(compiler, compiler.injector.get(MockDirectiveResolver), compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n  }\n\n}\n\nclass TestingCompilerImpl {\n  constructor(_compiler, _directiveResolver, _pipeResolver, _moduleResolver) {\n    this._compiler = _compiler;\n    this._directiveResolver = _directiveResolver;\n    this._pipeResolver = _pipeResolver;\n    this._moduleResolver = _moduleResolver;\n    this._overrider = new ɵMetadataOverrider();\n  }\n\n  get injector() {\n    return this._compiler.injector;\n  }\n\n  compileModuleSync(moduleType) {\n    return this._compiler.compileModuleSync(moduleType);\n  }\n\n  compileModuleAsync(moduleType) {\n    return this._compiler.compileModuleAsync(moduleType);\n  }\n\n  compileModuleAndAllComponentsSync(moduleType) {\n    return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n  }\n\n  compileModuleAndAllComponentsAsync(moduleType) {\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n  }\n\n  getComponentFactory(component) {\n    return this._compiler.getComponentFactory(component);\n  }\n\n  checkOverrideAllowed(type) {\n    if (this._compiler.hasAotSummary(type)) {\n      throw new Error(`${ɵstringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n    }\n  }\n\n  overrideModule(ngModule, override) {\n    this.checkOverrideAllowed(ngModule);\n\n    const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n\n    this._moduleResolver.setNgModule(ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n\n    this.clearCacheFor(ngModule);\n  }\n\n  overrideDirective(directive, override) {\n    this.checkOverrideAllowed(directive);\n\n    const oldMetadata = this._directiveResolver.resolve(directive, false);\n\n    this._directiveResolver.setDirective(directive, this._overrider.overrideMetadata(Directive, oldMetadata, override));\n\n    this.clearCacheFor(directive);\n  }\n\n  overrideComponent(component, override) {\n    this.checkOverrideAllowed(component);\n\n    const oldMetadata = this._directiveResolver.resolve(component, false);\n\n    this._directiveResolver.setDirective(component, this._overrider.overrideMetadata(Component, oldMetadata, override));\n\n    this.clearCacheFor(component);\n  }\n\n  overridePipe(pipe, override) {\n    this.checkOverrideAllowed(pipe);\n\n    const oldMetadata = this._pipeResolver.resolve(pipe, false);\n\n    this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n\n    this.clearCacheFor(pipe);\n  }\n\n  loadAotSummaries(summaries) {\n    this._compiler.loadAotSummaries(summaries);\n  }\n\n  clearCache() {\n    this._compiler.clearCache();\n  }\n\n  clearCacheFor(type) {\n    this._compiler.clearCacheFor(type);\n  }\n\n  getComponentFromError(error) {\n    return error[ERROR_COMPONENT_TYPE] || null;\n  }\n\n  getModuleId(moduleType) {\n    return this._moduleResolver.resolve(moduleType, true).id;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Platform for dynamic tests\n *\n * @publicApi\n */\n\n\nconst platformCoreDynamicTesting = createPlatformFactory(ɵplatformCoreDynamic, 'coreDynamicTesting', [{\n  provide: COMPILER_OPTIONS,\n  useValue: {\n    providers: COMPILER_PROVIDERS\n  },\n  multi: true\n}, {\n  provide: ɵTestingCompilerFactory,\n  useClass: TestingCompilerFactoryImpl,\n  deps: [Injector, CompilerFactory]\n}]);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @publicApi\n */\n\nconst platformBrowserDynamicTesting = createPlatformFactory(platformCoreDynamicTesting, 'browserDynamicTesting', ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\n\nclass BrowserDynamicTestingModule {}\n\nBrowserDynamicTestingModule.ɵfac = function BrowserDynamicTestingModule_Factory(t) {\n  return new (t || BrowserDynamicTestingModule)();\n};\n\nBrowserDynamicTestingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BrowserDynamicTestingModule,\n  exports: [BrowserTestingModule]\n});\nBrowserDynamicTestingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: TestComponentRenderer,\n    useClass: DOMTestComponentRenderer\n  }],\n  imports: [BrowserTestingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrowserDynamicTestingModule, [{\n    type: NgModule,\n    args: [{\n      exports: [BrowserTestingModule],\n      providers: [{\n        provide: TestComponentRenderer,\n        useClass: DOMTestComponentRenderer\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BrowserDynamicTestingModule, platformBrowserDynamicTesting, DOMTestComponentRenderer as ɵDOMTestComponentRenderer, platformCoreDynamicTesting as ɵplatformCoreDynamicTesting };","map":{"version":3,"sources":["E:/skote-admin/Starterkit/node_modules/@angular/platform-browser-dynamic/fesm2020/testing.mjs"],"names":["i0","Injectable","Inject","ɵstringify","NgModule","Directive","Component","Pipe","createPlatformFactory","COMPILER_OPTIONS","Injector","CompilerFactory","TestComponentRenderer","ɵMetadataOverrider","ɵTestingCompilerFactory","ɵplatformCoreDynamic","ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS","BrowserTestingModule","ɵgetDOM","DOCUMENT","CompileReflector","PipeResolver","DirectiveResolver","NgModuleResolver","ERROR_COMPONENT_TYPE","MockPipeResolver","MockDirectiveResolver","MockNgModuleResolver","DOMTestComponentRenderer","constructor","_doc","insertRootElement","rootElId","removeAllRootElements","rootElement","getDefaultDocument","createElement","setAttribute","body","appendChild","oldRoots","querySelectorAll","i","length","remove","ɵfac","ɵprov","type","undefined","decorators","args","COMPILER_PROVIDERS","provide","deps","useExisting","TestingCompilerFactoryImpl","_injector","_compilerFactory","createTestingCompiler","options","compiler","createCompiler","TestingCompilerImpl","injector","get","_compiler","_directiveResolver","_pipeResolver","_moduleResolver","_overrider","compileModuleSync","moduleType","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","getComponentFactory","component","checkOverrideAllowed","hasAotSummary","Error","overrideModule","ngModule","override","oldMetadata","resolve","setNgModule","overrideMetadata","clearCacheFor","overrideDirective","directive","setDirective","overrideComponent","overridePipe","pipe","setPipe","loadAotSummaries","summaries","clearCache","getComponentFromError","error","getModuleId","id","platformCoreDynamicTesting","useValue","providers","multi","useClass","platformBrowserDynamicTesting","BrowserDynamicTestingModule","ɵmod","ɵinj","exports","ɵDOMTestComponentRenderer","ɵplatformCoreDynamicTesting"],"mappings":"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","sourcesContent":["/**\n * @license Angular v13.0.2\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, ɵstringify, NgModule, Directive, Component, Pipe, createPlatformFactory, COMPILER_OPTIONS, Injector, CompilerFactory } from '@angular/core';\nimport { TestComponentRenderer, ɵMetadataOverrider, ɵTestingCompilerFactory } from '@angular/core/testing';\nimport { ɵplatformCoreDynamic, ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS } from '@angular/platform-browser-dynamic';\nimport { BrowserTestingModule } from '@angular/platform-browser/testing';\nimport { ɵgetDOM, DOCUMENT } from '@angular/common';\nimport { CompileReflector, PipeResolver, DirectiveResolver, NgModuleResolver, ERROR_COMPONENT_TYPE } from '@angular/compiler';\nimport { MockPipeResolver, MockDirectiveResolver, MockNgModuleResolver } from '@angular/compiler/testing';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\nclass DOMTestComponentRenderer extends TestComponentRenderer {\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n    }\n    insertRootElement(rootElId) {\n        this.removeAllRootElements();\n        const rootElement = ɵgetDOM().getDefaultDocument().createElement('div');\n        rootElement.setAttribute('id', rootElId);\n        this._doc.body.appendChild(rootElement);\n    }\n    removeAllRootElements() {\n        // TODO(juliemr): can/should this be optional?\n        const oldRoots = this._doc.querySelectorAll('[id^=root]');\n        for (let i = 0; i < oldRoots.length; i++) {\n            ɵgetDOM().remove(oldRoots[i]);\n        }\n    }\n}\nDOMTestComponentRenderer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: DOMTestComponentRenderer, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nDOMTestComponentRenderer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: DOMTestComponentRenderer });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: DOMTestComponentRenderer, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPILER_PROVIDERS = [\n    { provide: MockPipeResolver, deps: [CompileReflector] },\n    { provide: PipeResolver, useExisting: MockPipeResolver },\n    { provide: MockDirectiveResolver, deps: [CompileReflector] },\n    { provide: DirectiveResolver, useExisting: MockDirectiveResolver },\n    { provide: MockNgModuleResolver, deps: [CompileReflector] },\n    { provide: NgModuleResolver, useExisting: MockNgModuleResolver },\n];\nclass TestingCompilerFactoryImpl {\n    constructor(_injector, _compilerFactory) {\n        this._injector = _injector;\n        this._compilerFactory = _compilerFactory;\n    }\n    createTestingCompiler(options) {\n        const compiler = this._compilerFactory.createCompiler(options);\n        return new TestingCompilerImpl(compiler, compiler.injector.get(MockDirectiveResolver), compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n    }\n}\nclass TestingCompilerImpl {\n    constructor(_compiler, _directiveResolver, _pipeResolver, _moduleResolver) {\n        this._compiler = _compiler;\n        this._directiveResolver = _directiveResolver;\n        this._pipeResolver = _pipeResolver;\n        this._moduleResolver = _moduleResolver;\n        this._overrider = new ɵMetadataOverrider();\n    }\n    get injector() {\n        return this._compiler.injector;\n    }\n    compileModuleSync(moduleType) {\n        return this._compiler.compileModuleSync(moduleType);\n    }\n    compileModuleAsync(moduleType) {\n        return this._compiler.compileModuleAsync(moduleType);\n    }\n    compileModuleAndAllComponentsSync(moduleType) {\n        return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n    }\n    compileModuleAndAllComponentsAsync(moduleType) {\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n    }\n    getComponentFactory(component) {\n        return this._compiler.getComponentFactory(component);\n    }\n    checkOverrideAllowed(type) {\n        if (this._compiler.hasAotSummary(type)) {\n            throw new Error(`${ɵstringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n        }\n    }\n    overrideModule(ngModule, override) {\n        this.checkOverrideAllowed(ngModule);\n        const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n        this._moduleResolver.setNgModule(ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n        this.clearCacheFor(ngModule);\n    }\n    overrideDirective(directive, override) {\n        this.checkOverrideAllowed(directive);\n        const oldMetadata = this._directiveResolver.resolve(directive, false);\n        this._directiveResolver.setDirective(directive, this._overrider.overrideMetadata(Directive, oldMetadata, override));\n        this.clearCacheFor(directive);\n    }\n    overrideComponent(component, override) {\n        this.checkOverrideAllowed(component);\n        const oldMetadata = this._directiveResolver.resolve(component, false);\n        this._directiveResolver.setDirective(component, this._overrider.overrideMetadata(Component, oldMetadata, override));\n        this.clearCacheFor(component);\n    }\n    overridePipe(pipe, override) {\n        this.checkOverrideAllowed(pipe);\n        const oldMetadata = this._pipeResolver.resolve(pipe, false);\n        this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n        this.clearCacheFor(pipe);\n    }\n    loadAotSummaries(summaries) {\n        this._compiler.loadAotSummaries(summaries);\n    }\n    clearCache() {\n        this._compiler.clearCache();\n    }\n    clearCacheFor(type) {\n        this._compiler.clearCacheFor(type);\n    }\n    getComponentFromError(error) {\n        return error[ERROR_COMPONENT_TYPE] || null;\n    }\n    getModuleId(moduleType) {\n        return this._moduleResolver.resolve(moduleType, true).id;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Platform for dynamic tests\n *\n * @publicApi\n */\nconst platformCoreDynamicTesting = createPlatformFactory(ɵplatformCoreDynamic, 'coreDynamicTesting', [\n    { provide: COMPILER_OPTIONS, useValue: { providers: COMPILER_PROVIDERS }, multi: true }, {\n        provide: ɵTestingCompilerFactory,\n        useClass: TestingCompilerFactoryImpl,\n        deps: [Injector, CompilerFactory]\n    }\n]);\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nconst platformBrowserDynamicTesting = createPlatformFactory(platformCoreDynamicTesting, 'browserDynamicTesting', ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\nclass BrowserDynamicTestingModule {\n}\nBrowserDynamicTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BrowserDynamicTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBrowserDynamicTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BrowserDynamicTestingModule, exports: [BrowserTestingModule] });\nBrowserDynamicTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BrowserDynamicTestingModule, providers: [\n        { provide: TestComponentRenderer, useClass: DOMTestComponentRenderer },\n    ], imports: [BrowserTestingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BrowserDynamicTestingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [BrowserTestingModule],\n                    providers: [\n                        { provide: TestComponentRenderer, useClass: DOMTestComponentRenderer },\n                    ]\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserDynamicTestingModule, platformBrowserDynamicTesting, DOMTestComponentRenderer as ɵDOMTestComponentRenderer, platformCoreDynamicTesting as ɵplatformCoreDynamicTesting };\n"]},"metadata":{},"sourceType":"module"}